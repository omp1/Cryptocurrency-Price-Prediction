import pandas as pd
from google.colab import files
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import ast

files.upload()
data = pd.read_csv('combined_cleaned_data.csv')

#data cleaning, remove invalid rows, convert date to datetime,
data = data.dropna()
data['date'] = pd.to_datetime(data['date'], errors='coerce')  
data = data.dropna(subset=['date']) 

#filter out super small values, MAYBE CHANGE THIS IN FUTURE?
data = data[(data['market_cap'] > 0) & (data['total_volume'] > 0)]

#features/target
features = ['total_volume', 'market_cap']
target = 'price'
X = data[features]
y = data[target]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


linear_model = LinearRegression()
linear_model.fit(X_train, y_train)


y_pred = linear_model.predict(X_test)


mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

#print mae and r
print(f"Mean Absolute Error (MAE): {mae}")
print(f"R-squared (RÂ²): {r2}")

#relate to time
time_series_data = X_test.copy()
time_series_data['actual_price'] = y_test
time_series_data['predicted_price'] = y_pred
time_series_data['date'] = data.loc[y_test.index, 'date']  
time_series_data = time_series_data.sort_values(by='date')  


plt.figure(figsize=(12, 6))
plt.plot(time_series_data['date'], time_series_data['actual_price'], label='Actual Price', color='red', alpha=0.8)
plt.plot(time_series_data['date'], time_series_data['predicted_price'], label='Predicted Price', color='green', alpha=0.8)
plt.title("Linear Regression: Actual vs Predicted Bitcoin Prices Over Time")
plt.xlabel("Date")
plt.ylabel("Bitcoin Price")
plt.legend()
plt.grid(True)
plt.show()
